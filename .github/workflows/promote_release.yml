name: Promote Release

on:
  workflow_call:
    inputs:
      source_env:
        description: 'Source environment'
        required: true
        type: string
      target_env:
        description: 'Target environment'
        required: true
        type: string
      version:
        description: 'Version to promote'
        required: true
        type: string
      gitops_file:
        description: 'Path to the GitOps configuration file'
        required: false
        type: string
        default: 'gitops.yaml'
      app_id:
        description: 'GitHub App ID for token generation (required)'
        required: true
        type: string
      runs_on:
        description: 'GitHub runner to use'
        required: false
        type: string
        default: '2uinc-mgmt'
    secrets:
      private_key:
        description: 'GitHub App private key for token generation (required)'
        required: true
    outputs:
      pr_url:
        description: "URL of the created pull request"
        value: ${{ jobs.promote.outputs.pr_url }}
      pr_number:
        description: "Number of the created pull request"
        value: ${{ jobs.promote.outputs.pr_number }}

jobs:
  promote:
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write
      pull-requests: write
    outputs:
      pr_url: ${{ steps.create-pr.outputs.pull-request-url }}
      pr_number: ${{ steps.create-pr.outputs.pull-request-number }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Check version exists in source
        id: check-version
        run: |
          # Python yq uses jq syntax and pipes YAML to jq
          SOURCE_ENV="${{ inputs.source_env }}"
          SOURCE_VERSION=$(yq -r ".apps[] | select(.env == \"$SOURCE_ENV\") | .revision" ${{ inputs.gitops_file }})
          echo "Source environment: $SOURCE_VERSION"
          TARGET_VERSION="${{ inputs.version }}"

          # Check if version exists in source environment
          if [ "$SOURCE_VERSION" = "$TARGET_VERSION" ]; then
            echo "Version $TARGET_VERSION found in ${{ inputs.source_env }}"
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "Error: Version $TARGET_VERSION not found in ${{ inputs.source_env }}"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - uses: actions/create-github-app-token@v1
        id: generate-token
        with:
          app-id: ${{ inputs.app_id }}
          private-key: ${{ secrets.private_key}}

      - name: Update GitOps and Helm configs
        run: |
          # Python yq uses jq syntax
          TARGET_ENV="${{ inputs.target_env }}"
          TARGET_VERSION="${{ inputs.version }}"

          # Update the revision field for the matching environment directly in place
          yq -y --in-place ".apps |= map(if .env == \"$TARGET_ENV\" then .revision = \"$TARGET_VERSION\" else . end)" \
            ${{ inputs.gitops_file }}

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: 'chore: promote version ${{ inputs.version }} to ${{ inputs.target_env }}'
          title: 'chore: promote version ${{ inputs.version }} to ${{ inputs.target_env }}'
          body: |
            Promoting version ${{ inputs.version }} from ${{ inputs.source_env }} to ${{ inputs.target_env }}

            ## Promotion Details
            - Source: ${{ inputs.source_env }}
            - Target: ${{ inputs.target_env }}
            - Version: ${{ inputs.version }}

            This PR was automatically generated by the promotion workflow.
          branch: promote-${{ inputs.version }}-to-${{ inputs.target_env }}
          labels: |
            promotion
            env/${{ inputs.source_env }}-to-${{ inputs.target_env }}
            version/${{ inputs.version }}
          delete-branch: true
          
      - name: Print PR URL
        run: |
          echo "Created PR: ${{ steps.create-pr.outputs.pull-request-url }}"
