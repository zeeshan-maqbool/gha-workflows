name: Promote Release
description: 'Promotes a release to specified environments in a GitOps configuration file'

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name to promote (e.g., buildkite-node-app)'
        required: true
        type: string
      target_envs:
        description: 'Comma-separated list of target environments (e.g., "dev,stg,prod")'
        required: true
        type: string
      version:
        description: 'Version to promote'
        required: true
        type: string
      gitops_file:
        description: 'Path to the GitOps configuration file'
        required: false
        type: string
        default: 'gitops.yaml'
      app_id:
        description: 'GitHub App ID for token generation (required)'
        required: true
        type: string
      runs_on:
        description: 'GitHub runner to use'
        required: false
        type: string
        default: '2uinc-mgmt'
      enable_auto_deploy:
        description: 'Enable auto-approve and deploy functionality'
        required: false
        type: boolean
        default: true
      merge_type:
        description: 'Type of merge to perform (merge, rebase, or squash)'
        required: false
        type: string
        default: 'squash'
      create_pr_draft:
        description: 'Create PR as draft instead of ready for review'
        required: false
        type: boolean
        default: false
      pr_reviewers:
        description: 'Comma-separated list of GitHub usernames to request reviews from'
        required: false
        type: string
        default: ''
      promote_type:
        description: 'Type of promotion (pull_request or direct_push). Note: direct_push requires enable_auto_deploy=true'
        required: false
        type: string
        default: 'pull_request'
    secrets:
      private_key:
        description: 'GitHub App private key for token generation (required)'
        required: true
    outputs:
      pr_url:
        description: "URL of the created pull request"
        value: ${{ jobs.promote.outputs.pr_url }}
      pr_number:
        description: "Number of the created pull request"
        value: ${{ jobs.promote.outputs.pr_number }}
      version_found:
        description: "Whether the version was found in the github releases"
        value: ${{ jobs.promote.outputs.version_found }}

jobs:
  promote:
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write
      pull-requests: write
    outputs:
      pr_url: ${{ steps.create-pr.outputs.url }}
      pr_number: ${{ steps.create-pr.outputs.number }}
      version_found: ${{ steps.check-version.outputs.valid }}

    steps:
      - uses: actions/create-github-app-token@v1
        id: generate-token
        with:
          app-id: ${{ inputs.app_id }}
          private-key: ${{ secrets.private_key}}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          ref: ${{ github.event.repository.default_branch }}

      - name: Install Python yq
        run: |
          # Check if Python yq is installed, install if not
          if ! command -v yq &> /dev/null || ! yq --help 2>&1 | grep -q "https://github.com/kislyuk/yq"; then
            echo "Installing Python yq..."
            pip install yq
          fi
          yq --version
          # Verify we're using the Python version
          yq --help | grep -q "https://github.com/kislyuk/yq" || { echo "Error: Wrong yq version installed. Please ensure Python yq is installed."; exit 1; }

      - name: Check version exists and current state
        id: check-version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          APP_NAME="${{ inputs.app_name }}"
          TARGET_VERSION="${{ inputs.version }}"
          IFS=',' read -ra TARGET_ENVS <<< "${{ inputs.target_envs }}"

          # Fetch releases using GraphQL
          RELEASES=$(gh api graphql -f query='
            query($name: String!, $owner: String!) {
              repository(owner: $owner, name: $name) {
                releases(first: 100) {
                  nodes { tagName }
                }
              }
            }' -F owner="${GITHUB_REPOSITORY_OWNER}" -F name="${GITHUB_REPOSITORY#*/}" --jq '.data.repository.releases.nodes[].tagName')

          if [ -z "$RELEASES" ]; then
            echo "❌ Error: No releases found in repository"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if version exists in releases
          if echo "$RELEASES" | grep -q "^${TARGET_VERSION}$"; then
            echo "✅ Version $TARGET_VERSION found in releases for $APP_NAME"
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Error: Version not found in releases!"
            echo "Expected version: $TARGET_VERSION"
            echo "Available versions:"
            echo "$RELEASES" | head -n 5
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check current state in each target environment
          GITOPS_FILE="${{ inputs.gitops_file }}"
          if [ ! -f "$GITOPS_FILE" ]; then
            echo "Error: GitOps file $GITOPS_FILE not found!"
            exit 1
          fi

          ALL_UPDATED=true
          UPDATED_ENVS=""
          for ENV in "${TARGET_ENVS[@]}"; do
            CURRENT_VERSION=$(yq -r ".apps[] | select(.env == \"$ENV\" and .name == \"$APP_NAME\") | .revision" $GITOPS_FILE)

            if [ -n "$CURRENT_VERSION" ] && [ "$CURRENT_VERSION" = "$TARGET_VERSION" ]; then
              echo "⚠️ Warning: Version $TARGET_VERSION already exists in $ENV for $APP_NAME"
              [ -n "$UPDATED_ENVS" ] && UPDATED_ENVS="${UPDATED_ENVS},"
              UPDATED_ENVS="${UPDATED_ENVS}${ENV}"
            else
              ALL_UPDATED=false
            fi
          done

          if [ "$ALL_UPDATED" = true ]; then
            echo "target_already_updated=true" >> $GITHUB_OUTPUT
            echo "updated_envs=$UPDATED_ENVS" >> $GITHUB_OUTPUT
          else
            echo "target_already_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.generate-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
            GH_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Create and push changes (PR)
        id: create-pr
        if: inputs.promote_type == 'pull_request'
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          MERGE_TYPE: ${{ inputs.merge_type }}
        run: |
          # Validate merge type
          if [[ ! "$MERGE_TYPE" =~ ^(merge|rebase|squash)$ ]]; then
            echo "Error: Invalid merge type '$MERGE_TYPE'. Must be 'merge', 'rebase', or 'squash'"
            exit 1
          fi

          # Set up branch name and PR details
          APP_NAME="${{ inputs.app_name }}"
          TARGET_VERSION="${{ inputs.version }}"
          IFS=',' read -ra TARGET_ENVS <<< "${{ inputs.target_envs }}"

          # Create environment string for branch name (e.g., "dev-stg-prod")
          ENV_STRING=$(echo "${{ inputs.target_envs }}" | tr ',' '-')
          BRANCH_NAME="promote-${APP_NAME}-${TARGET_VERSION}-to-${ENV_STRING}"
          PR_TITLE="chore($APP_NAME): promote version ${TARGET_VERSION} to ${ENV_STRING}"

          # Check if branch already exists
          if git ls-remote --heads origin refs/heads/$BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "⚠️ Warning: Branch $BRANCH_NAME already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT

            # Check if there's an open PR for this branch
            EXISTING_PR=$(gh pr list --head $BRANCH_NAME --json number,url --jq '.[0]')
            if [ -n "$EXISTING_PR" ]; then
              PR_NUMBER=$(echo $EXISTING_PR | jq -r '.number')
              PR_URL=$(echo $EXISTING_PR | jq -r '.url')
              echo "Found existing PR #$PR_NUMBER: $PR_URL"
              echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
              echo "url=$PR_URL" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

          # Configure Git user
          git config --global user.name '${{ steps.generate-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.generate-token.outputs.app-slug }}[bot]@users.noreply.github.com'

          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"

          # Make a backup of the file before modification
          cp ${{ inputs.gitops_file }} ${{ inputs.gitops_file }}.bak

          # Update the GitOps file for each environment
          for ENV in "${TARGET_ENVS[@]}"; do
            yq -y --in-place ".apps |= map(if .env == \"$ENV\" and .name == \"$APP_NAME\" then .revision = \"$TARGET_VERSION\" else . end)" \
              ${{ inputs.gitops_file }}
          done

          # Check if file was changed
          if cmp -s ${{ inputs.gitops_file }} ${{ inputs.gitops_file }}.bak; then
            echo "❌ Error: Failed to update GitOps file. Application $APP_NAME might not exist in specified environments."
            rm ${{ inputs.gitops_file }}.bak
            exit 1
          fi

          rm ${{ inputs.gitops_file }}.bak

          # Commit and push changes
          git add ${{ inputs.gitops_file }}
          git commit -m "$PR_TITLE"
          git push origin "$BRANCH_NAME"

          # Create standard labels
          gh label create "promotion" --color "0E8A16" --description "Pull requests for promotions" || true
          gh label create "app/$APP_NAME" --color "5319E7" --description "Pull requests for $APP_NAME" || true
          gh label create "version/$TARGET_VERSION" --color "1D76DB" --description "Pull requests for $APP_NAME" || true

          # Create environment-specific labels
          for ENV in "${TARGET_ENVS[@]}"; do
            gh label create "env/$TARGET_VERSION-to-$ENV" --color "FBCA04" \
              --description "Pull requests for promotions from $TARGET_VERSION to $ENV" || true
          done

          # Build PR body
          PR_BODY="Promoting $APP_NAME version $TARGET_VERSION to multiple environments

          ## Promotion Details
          - Application: $APP_NAME
          - Version: $TARGET_VERSION
          - Target Environments:
          $(for ENV in "${TARGET_ENVS[@]}"; do echo "  - $ENV"; done)

          This PR was automatically generated by the promotion workflow."

          # Prepare PR creation command with labels
          PR_CMD="gh pr create --title \"$PR_TITLE\" --body \"$PR_BODY\" \
          --label \"promotion\" \
          --label \"version/$TARGET_VERSION\" \
          --label \"app/$APP_NAME\""

          # Add environment-specific labels
          for ENV in "${TARGET_ENVS[@]}"; do
            PR_CMD="$PR_CMD --label \"env/$TARGET_VERSION-to-$ENV\""
          done

          # Add draft option if requested
          if [ "${{ inputs.create_pr_draft }}" == "true" ]; then
            PR_CMD="$PR_CMD --draft"
          fi

          # Add reviewers if specified
          if [ -n "${{ inputs.pr_reviewers }}" ]; then
            PR_CMD="$PR_CMD --reviewer ${{ inputs.pr_reviewers }}"
          fi

          # Create PR and capture outputs
          PR_URL=$(eval $PR_CMD)
          PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]*$')
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "url=$PR_URL" >> $GITHUB_OUTPUT

      - name: Direct push to default branch
        id: direct-push
        if: |
          inputs.promote_type == 'direct_push' && 
          inputs.enable_auto_deploy == true
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          if [[ "${{ inputs.enable_auto_deploy }}" != "true" ]]; then
            echo "❌ Error: direct_push requires enable_auto_deploy=true"
            exit 1
          fi

          # Configure Git user
          git config --global user.name '${{ steps.generate-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.generate-token.outputs.app-slug }}[bot]@users.noreply.github.com'

          # Set up commit details
          APP_NAME="${{ inputs.app_name }}"
          TARGET_VERSION="${{ inputs.version }}"
          IFS=',' read -ra TARGET_ENVS <<< "${{ inputs.target_envs }}"
          ENV_STRING=$(echo "${{ inputs.target_envs }}" | tr ',' '-')
          COMMIT_MSG="chore($APP_NAME): promote version ${TARGET_VERSION} to ${ENV_STRING}"

          # Make a backup of the file before modification
          cp ${{ inputs.gitops_file }} ${{ inputs.gitops_file }}.bak

          # Update the GitOps file for each environment
          for ENV in "${TARGET_ENVS[@]}"; do
            yq -y --in-place ".apps |= map(if .env == \"$ENV\" and .name == \"$APP_NAME\" then .revision = \"$TARGET_VERSION\" else . end)" \
              ${{ inputs.gitops_file }}
          done

          # Check if file was changed
          if cmp -s ${{ inputs.gitops_file }} ${{ inputs.gitops_file }}.bak; then
            echo "❌ Error: Failed to update GitOps file. Application $APP_NAME might not exist in specified environments."
            rm ${{ inputs.gitops_file }}.bak
            exit 1
          fi

          rm ${{ inputs.gitops_file }}.bak

          # Commit and push changes directly to default branch
          git add ${{ inputs.gitops_file }}
          git commit -m "$COMMIT_MSG"

          # Push changes, with retry logic
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if git push origin HEAD:${{ github.event.repository.default_branch }}; then
              echo "✅ Successfully pushed changes to default branch"
              break
            fi
            echo "Attempt $attempt failed. Retrying..."
            git pull --rebase origin ${{ github.event.repository.default_branch }}
            attempt=$((attempt + 1))
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Failed to push changes after $max_attempts attempts"
            exit 1
          fi

          echo "promotion_type=direct_push" >> $GITHUB_OUTPUT
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Log promotion details
        run: |
          if [[ "${{ inputs.promote_type }}" == "direct_push" ]]; then
            echo "Direct push completed for ${{ inputs.app_name }} version ${{ inputs.version }}"
            echo "Commit SHA: ${{ steps.direct-push.outputs.commit_sha }}"
          else
            echo "Pull request created: ${{ steps.create-pr.outputs.url }}"
          fi

  pr-based-auto-deploy:
    needs: promote
    if: |
      inputs.promote_type == 'pull_request' &&
      inputs.enable_auto_deploy == true &&
      needs.promote.outputs.version_found == 'true'
    runs-on: ${{ inputs.runs_on }}
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Auto-approve and merge PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          IFS=',' read -ra TARGET_ENVS <<< "${{ inputs.target_envs }}"
          ENV_STRING=$(IFS=, ; echo "${TARGET_ENVS[*]}")

          echo "Auto-approving PR #${{ needs.promote.outputs.pr_number }} for environments: $ENV_STRING"
          gh pr review ${{ needs.promote.outputs.pr_number }} --repo ${{ github.repository }} \
            --approve -b "Auto-approving promotion for ${{ inputs.app_name }} to environments: $ENV_STRING"

          echo "Setting PR to auto-merge with ${{inputs.merge_type}} strategy"
          gh pr merge ${{ needs.promote.outputs.pr_number }} --auto --repo ${{ github.repository }} --${{inputs.merge_type}}
