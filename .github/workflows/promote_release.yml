name: Promote Release

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name to promote (e.g., buildkite-node-app)'
        required: true
        type: string
      source_env:
        description: 'Source environment'
        required: true
        type: string
      target_env:
        description: 'Target environment'
        required: true
        type: string
      version:
        description: 'Version to promote'
        required: true
        type: string
      gitops_file:
        description: 'Path to the GitOps configuration file'
        required: false
        type: string
        default: 'gitops.yaml'
      app_id:
        description: 'GitHub App ID for token generation (required)'
        required: true
        type: string
      runs_on:
        description: 'GitHub runner to use'
        required: false
        type: string
        default: '2uinc-mgmt'
      auto_deploy_environments:
        description: 'Comma-separated list of environments to enable auto-approve and deploy for'
        required: false
        type: string
        default: 'stg'
      enable_auto_deploy:
        description: 'Enable auto-approve and deploy functionality'
        required: false
        type: boolean
        default: true
      merge_type:
        description: 'Type of merge to perform (merge, rebase, or squash)'
        required: false
        type: string
        default: 'squash'
      create_pr_draft:
        description: 'Create PR as draft instead of ready for review'
        required: false
        type: boolean
        default: false
      pr_reviewers:
        description: 'Comma-separated list of GitHub usernames to request reviews from'
        required: false
        type: string
        default: ''
    secrets:
      private_key:
        description: 'GitHub App private key for token generation (required)'
        required: true
    outputs:
      pr_url:
        description: "URL of the created pull request"
        value: ${{ jobs.promote.outputs.pr_url }}
      pr_number:
        description: "Number of the created pull request"
        value: ${{ jobs.promote.outputs.pr_number }}
      version_found:
        description: "Whether the version was found in the source environment"
        value: ${{ jobs.promote.outputs.version_found }}

jobs:
  promote:
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write
      pull-requests: write
    outputs:
      pr_url: ${{ steps.create-pr.outputs.url }}
      pr_number: ${{ steps.create-pr.outputs.number }}
      version_found: ${{ steps.check-version.outputs.valid }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for better commit messages

      - name: Install Python yq
        run: |
          # Check if Python yq is installed, install if not
          if ! command -v yq &> /dev/null || ! yq --help 2>&1 | grep -q "Python YAML processor"; then
            echo "Installing Python yq..."
            pip install yq
          fi
          yq --version
          # Verify we're using the Python version
          yq --help | grep -q "Python YAML processor" || { echo "Error: Wrong yq version installed. Please ensure Python yq is installed."; exit 1; }

      - name: Check version exists in source
        id: check-version
        run: |
          SOURCE_ENV="${{ inputs.source_env }}"
          APP_NAME="${{ inputs.app_name }}"
          GITOPS_FILE="${{ inputs.gitops_file }}"

          # Check if gitops file exists
          if [ ! -f "$GITOPS_FILE" ]; then
            echo "Error: GitOps file $GITOPS_FILE not found!"
            exit 1
          fi

          # Extract source version
          SOURCE_VERSION=$(yq -r ".apps[] | select(.env == \"$SOURCE_ENV\" and .name == \"$APP_NAME\") | .revision" $GITOPS_FILE)
          echo "Current version in $SOURCE_ENV: $SOURCE_VERSION"
          TARGET_VERSION="${{ inputs.version }}"

          # Check if application exists in source environment
          if [ -z "$SOURCE_VERSION" ]; then
            echo "Error: Application $APP_NAME not found in $SOURCE_ENV environment"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if target version matches source version
          if [ "$SOURCE_VERSION" = "$TARGET_VERSION" ]; then
            echo "✅ Version $TARGET_VERSION found in ${{ inputs.source_env }} for $APP_NAME"
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Error: Version mismatch!"
            echo "Expected version: $TARGET_VERSION"
            echo "Found version: $SOURCE_VERSION"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if version already exists in target environment
          TARGET_ENV="${{ inputs.target_env }}"
          CURRENT_TARGET_VERSION=$(yq -r ".apps[] | select(.env == \"$TARGET_ENV\" and .name == \"$APP_NAME\") | .revision" $GITOPS_FILE)

          if [ -n "$CURRENT_TARGET_VERSION" ] && [ "$CURRENT_TARGET_VERSION" = "$TARGET_VERSION" ]; then
            echo "⚠️ Warning: Version $TARGET_VERSION already exists in $TARGET_ENV for $APP_NAME"
            echo "target_already_updated=true" >> $GITHUB_OUTPUT
          else
            echo "target_already_updated=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/create-github-app-token@v1
        id: generate-token
        with:
          app-id: ${{ inputs.app_id }}
          private-key: ${{ secrets.private_key}}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push changes
        id: create-pr
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          MERGE_TYPE: ${{ inputs.merge_type }}
        run: |
          # Validate merge type
          if [[ ! "$MERGE_TYPE" =~ ^(merge|rebase|squash)$ ]]; then
            echo "Error: Invalid merge type '$MERGE_TYPE'. Must be 'merge', 'rebase', or 'squash'"
            exit 1
          fi

          # Set up branch name and PR details
          APP_NAME="${{ inputs.app_name }}"
          BRANCH_NAME="promote-${APP_NAME}-${{ inputs.version }}-to-${{ inputs.target_env }}"
          PR_TITLE="chore($APP_NAME): promote version ${{ inputs.version }} to ${{ inputs.target_env }}"

          # Check if branch already exists
          if git ls-remote --heads origin refs/heads/$BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "⚠️ Warning: Branch $BRANCH_NAME already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT

            # Check if there's an open PR for this branch
            EXISTING_PR=$(gh pr list --head $BRANCH_NAME --json number,url --jq '.[0]')
            if [ -n "$EXISTING_PR" ]; then
              PR_NUMBER=$(echo $EXISTING_PR | jq -r '.number')
              PR_URL=$(echo $EXISTING_PR | jq -r '.url')
              echo "Found existing PR #$PR_NUMBER: $PR_URL"
              echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
              echo "url=$PR_URL" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"

          # Update the GitOps file
          TARGET_ENV="${{ inputs.target_env }}"
          TARGET_VERSION="${{ inputs.version }}"

          # Make a backup of the file before modification
          cp ${{ inputs.gitops_file }} ${{ inputs.gitops_file }}.bak

          # Update the GitOps file
          yq -y --in-place ".apps |= map(if .env == \"$TARGET_ENV\" and .name == \"$APP_NAME\" then .revision = \"$TARGET_VERSION\" else . end)" \
            ${{ inputs.gitops_file }}

          # Check if file was changed
          if cmp -s ${{ inputs.gitops_file }} ${{ inputs.gitops_file }}.bak; then
            echo "❌ Error: Failed to update GitOps file. Application $APP_NAME might not exist in $TARGET_ENV environment."
            rm ${{ inputs.gitops_file }}.bak
            exit 1
          fi

          rm ${{ inputs.gitops_file }}.bak

          # Commit and push changes
          git add ${{ inputs.gitops_file }}
          git commit -m "$PR_TITLE"
          git push origin "$BRANCH_NAME"

          # Create labels if they don't exist
          gh label create "promotion" --color "0E8A16" --description "Pull requests for promotions" || true
          gh label create "env/${{ inputs.source_env }}-to-${{ inputs.target_env }}" --color "FBCA04" \
            --description "Pull requests for promotions from ${{ inputs.source_env }} to ${{ inputs.target_env }}" || true
          gh label create "version/${{ inputs.version }}" --color "1D76DB" \
            --description "Pull requests for promotions of version ${{ inputs.version }}" || true
          gh label create "app/$APP_NAME" --color "5319E7" \
            --description "Pull requests for $APP_NAME" || true

          # Prepare PR creation command
          PR_CMD="gh pr create --title \"$PR_TITLE\" --body \"Promoting $APP_NAME version ${{ inputs.version }} from ${{ inputs.source_env }} to ${{ inputs.target_env }}

          ## Promotion Details
          - Application: $APP_NAME
          - Source: ${{ inputs.source_env }}
          - Target: ${{ inputs.target_env }}
          - Version: ${{ inputs.version }}

          This PR was automatically generated by the promotion workflow.\" \
          --label \"promotion\" \
          --label \"env/${{ inputs.source_env }}-to-${{ inputs.target_env }}\" \
          --label \"version/${{ inputs.version }}\" \
          --label \"app/$APP_NAME\""

          # Add draft option if requested
          if [ "${{ inputs.create_pr_draft }}" == "true" ]; then
            PR_CMD="$PR_CMD --draft"
          fi

          # Add reviewers if specified
          if [ -n "${{ inputs.pr_reviewers }}" ]; then
            PR_CMD="$PR_CMD --reviewer ${{ inputs.pr_reviewers }}"
          fi

          # Create PR and capture outputs
          PR_URL=$(eval $PR_CMD)

          PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]*$')
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "url=$PR_URL" >> $GITHUB_OUTPUT

      - name: Print PR URL
        run: |
          echo "Created PR: ${{ steps.create-pr.outputs.url }}"

  auto-deploy:
    needs: promote
    if: |
      inputs.enable_auto_deploy == true &&
      needs.promote.outputs.version_found == 'true'
    runs-on: ${{ inputs.runs_on }}
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Check if auto-deploy is enabled for environment
        id: check-auto-deploy
        run: |
          IFS=',' read -ra AUTO_DEPLOY_ENVS <<< "${{ inputs.auto_deploy_environments }}"
          for env in "${AUTO_DEPLOY_ENVS[@]}"; do
            if [ "${env// /}" = "${{ inputs.target_env }}" ]; then
              echo "enabled=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "enabled=false" >> $GITHUB_OUTPUT

      - name: Auto-approve PR
        if: steps.check-auto-deploy.outputs.enabled == 'true'
        run: |
          echo "Auto-approving PR #${{ needs.promote.outputs.pr_number }} for ${{ inputs.target_env }} environment"
          gh pr review ${{ needs.promote.outputs.pr_number }} --repo ${{ github.repository }} --approve -b "Auto-approving ${{ inputs.target_env }} promotion for ${{ inputs.app_name }}"

          echo "Setting PR to auto-merge with ${{inputs.merge_type}} strategy"
          gh pr merge ${{ needs.promote.outputs.pr_number }} --auto --repo ${{ github.repository }} --${{inputs.merge_type}}
        env:
          GH_TOKEN: ${{ github.token }}
