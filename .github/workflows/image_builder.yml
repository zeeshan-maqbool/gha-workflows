name: Image builder

on:
  workflow_call:
    inputs:
      RUNS_ON:
        required: true
        type: string
      AWS_ROLE:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      ROLE_CHAINING:
        required: false
        type: boolean
        default: false
      SKIP_SESSION_TAGGING:
        required: false
        type: boolean
        default: false
      REPO_NAME:
        required: true
        type: string
      CONTEXT:
        required: false
        type: string
        default: .
      IMAGE_FILE:
        required: false
        type: string
        default: Dockerfile
      IMAGE_TAG:
        required: true
        type: string
      PLATFORMS:
        required: true
        type: string
      PUSH_IMAGE:
        required: false
        type: boolean
        default: false
      CHECKOUT_SUBMODULES:
        required: false
        type: string
        default: ''
      ALLOW_VULNERABILITIES:
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    runs-on: ${{ inputs.RUNS_ON }}
    steps:
      - name: Install Node
        shell: bash
        run: |
          curl -sS https://webi.sh/node | sh
          echo ~/.local/opt/node/bin >> $GITHUB_PATH

      - name: Check repository secrets
        id: check-secrets
        run: |
          if [ -z "${{ secrets.ACTIONS_RUNNER_APP_ID }}" ]; then
            echo "REPO_SECRETS_SET=false" >> $GITHUB_ENV
          else
            echo "REPO_SECRETS_SET=true" >> $GITHUB_ENV
          fi

      - name: Git clone the repository
        if: ${{ !inputs.CHECKOUT_SUBMODULES }}
        uses: actions/checkout@v4

      - name: Generate Github Token
        if: ${{ env.REPO_SECRETS_SET == 'true' && inputs.CHECKOUT_SUBMODULES }}
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.ACTIONS_RUNNER_APP_ID }}
          private-key: ${{ secrets.ACTIONS_RUNNER_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Git clone repository with submodules
        if: ${{ inputs.CHECKOUT_SUBMODULES }}
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          token: ${{ steps.app-token.outputs.token || github.token}}
          submodules: ${{ inputs.CHECKOUT_SUBMODULES }}

      - name: Set env
        shell: bash
        run: |
          # Set OS Architecture
          echo "OS_ARCH=$(docker version --format '{{.Client.Os}}/{{.Client.Arch}}')" >> $GITHUB_ENV

          # Translate ALLOW_VULNERABILITIES to 0 or 1
          if ${{ inputs.ALLOW_VULNERABILITIES }}; then
            echo "ALLOW_VULN=0" >> $GITHUB_ENV
          else
            echo "ALLOW_VULN=1" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ inputs.AWS_ROLE }}
          aws-region: ${{ inputs.AWS_REGION }}
          mask-aws-account-id: false
          role-chaining: ${{ inputs.ROLE_CHAINING }}
          role-skip-session-tagging: ${{ inputs.SKIP_SESSION_TAGGING }}

      - name: Login to Amazon ECR Private
        uses: aws-actions/amazon-ecr-login@v2.0.1
        id: login-ecr

      - name: Create ECR repository if not exist
        uses: int128/create-ecr-repository-action@v1.248.0
        id: ecr_repo
        with:
          repository: ${{ inputs.REPO_NAME }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: 889132874985.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/tonistiigi/binfmt:latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      - name: Build Docker Image
        uses: docker/build-push-action@v5.2.0
        with:
          context: ${{ inputs.CONTEXT }}
          file: ${{ inputs.IMAGE_FILE }}
          push: true
          tags: '${{ steps.ecr_repo.outputs.repository-uri }}:${{ inputs.IMAGE_TAG }}-scan'
          platforms: ${{ inputs.PLATFORMS }}
          cache-from: type=registry,ref=${{ steps.ecr_repo.outputs.repository-uri }}:${{ inputs.IMAGE_TAG }}-cache
          cache-to: type=registry,ref=${{ steps.ecr_repo.outputs.repository-uri }}:${{ inputs.IMAGE_TAG }}-cache,mode=max,image-manifest=true

      - name: Vulnerability Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: '${{ steps.ecr_repo.outputs.repository-uri }}:${{ inputs.IMAGE_TAG }}-scan'
          scan-type: 'image'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'vuln'
          severity: 'CRITICAL'
          exit-code: ${{ env.ALLOW_VULN }}

      - name: Push Docker Image
        if: ${{ inputs.PUSH_IMAGE }}
        uses: docker/build-push-action@v5.2.0
        with:
          context: ${{ inputs.CONTEXT }}
          file: ${{ inputs.IMAGE_FILE }}
          push: true
          tags: '${{ steps.ecr_repo.outputs.repository-uri }}:${{ inputs.IMAGE_TAG }}'
          platforms: ${{ inputs.PLATFORMS }}
          cache-from: type=registry,ref=${{ steps.ecr_repo.outputs.repository-uri }}:${{ inputs.IMAGE_TAG }}-cache

      - name: Clean up cache and scan imagas
        shell: bash
        run: |
          aws ecr batch-delete-image --repository-name ${{ inputs.REPO_NAME }} --image-ids imageTag=${{ inputs.IMAGE_TAG }}-cache
          aws ecr batch-delete-image --repository-name ${{ inputs.REPO_NAME }} --image-ids imageTag=${{ inputs.IMAGE_TAG }}-scan
